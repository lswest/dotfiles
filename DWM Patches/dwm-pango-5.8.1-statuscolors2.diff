diff -up dwm-5.8.1/config.def.h dwm-5.8.1-patched/config.def.h
--- dwm-5.8.1/config.def.h	2010-05-31 09:58:26.000000000 +0000
+++ dwm-5.8.1-patched/config.def.h	2010-05-31 09:49:24.000000000 +0000
@@ -1,13 +1,16 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const char font[]            = "Sans 8"
-static const char normbordercolor[] = "#cccccc";
-static const char normbgcolor[]     = "#cccccc";
-static const char normfgcolor[]     = "#000000";
-static const char selbordercolor[]  = "#0066ff";
-static const char selbgcolor[]      = "#0066ff";
-static const char selfgcolor[]      = "#ffffff";
+static const char font[]            = "Sans 8";
+#define NUMCOLORS         4             // need at least 3
+static const char colors[NUMCOLORS][ColLast][8] = {
+ // border   foreground  background
+ { "#cccccc", "#000000", "#cccccc" },  // 0 = normal
+ { "#0066ff", "#ffffff", "#0066ff" },  // 1 = selected
+ { "#ffffff", "#ffffff", "#0066ff" },  // 2 = urgent/warning
+ { "#ff0000", "#ffffff", "#ff0000" },  // 3 = error
+ // add more here
+};
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const Bool showbar           = True;     /* False means no bar */
@@ -45,7 +48,7 @@ static const Layout layouts[] = {
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
-static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", colors[0][ColBG], "-nf", colors[0][ColFG], "-sb", colors[1][ColBG], "-sf", colors[1][ColFG], NULL };
 static const char *termcmd[]  = { "uxterm", NULL };
 
 static Key keys[] = {
diff -up dwm-5.8.1/dwm.c dwm-5.8.1-patched/dwm.c
--- dwm-5.8.1/dwm.c	2010-05-31 09:58:30.000000000 +0000
+++ dwm-5.8.1-patched/dwm.c	2010-05-31 10:07:05.000000000 +0000
@@ -56,6 +56,7 @@
 #ifndef MIN
 #define MIN(A, B)               ((A) < (B) ? (A) : (B))
 #endif
+#define MAXCOLORS		8
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
@@ -103,13 +104,11 @@ struct Client {
 
 typedef struct {
 	int x, y, w, h;
-	unsigned long norm[ColLast];
-	unsigned long sel[ColLast];
+        unsigned long colors[MAXCOLORS][ColLast];
 	Drawable drawable;
 	GC gc;
 
-	XftColor  xftnorm[ColLast];
-	XftColor  xftsel[ColLast];
+        XftColor  xftcolors[MAXCOLORS][ColLast];
 	XftDraw  *xftdrawable;
 
 	PangoContext *pgc;
@@ -167,8 +166,9 @@ static void die(const char *errstr, ...)
 static Monitor *dirtomon(int dir);
 static void drawbar(Monitor *m);
 static void drawbars(void);
-static void drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]);
-static void drawtext(const char *text, unsigned long col[ColLast], Bool invert);
+static void drawcoloredtext(char *text);
+static void drawsquare(Bool filled, Bool empty, unsigned long col[ColLast]);
+static void drawtext(const char *text, unsigned long col[ColLast], Bool pad);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
 static void focus(Client *c);
@@ -708,14 +708,13 @@ drawbar(Monitor *m) {
 	dc.x = 0;
 	for(i = 0; i < LENGTH(tags); i++) {
 		dc.w = TEXTW(tags[i]);
-		col = m->tagset[m->seltags] & 1 << i ? dc.sel : dc.norm;
-		drawtext(tags[i], col, urg & 1 << i);
-		drawsquare(m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-		           occ & 1 << i, urg & 1 << i, col);
+                col = dc.colors[ (m->tagset[m->seltags] & 1 << i ? 1:(urg & 1 << i ? 2:0))];
+                drawtext(tags[i], col, True);
+		drawsquare(m == selmon && selmon->sel && selmon->sel->tags & 1 << i, occ & 1 << i, 			col);
 		dc.x += dc.w;
 	}
 	dc.w = blw = TEXTW(m->ltsymbol);
-	drawtext(m->ltsymbol, dc.norm, False);
+	drawtext(m->ltsymbol, dc.colors[0], True);
 	dc.x += dc.w;
 	x = dc.x;
 	if(m == selmon) { /* status is only drawn on selected monitor */
@@ -725,19 +724,19 @@ drawbar(Monitor *m) {
 			dc.x = x;
 			dc.w = m->ww - x;
 		}
-		drawtext(stext, dc.norm, False);
+		drawcoloredtext(stext);
 	}
 	else
 		dc.x = m->ww;
 	if((dc.w = dc.x - x) > bh) {
 		dc.x = x;
 		if(m->sel) {
-			col = m == selmon ? dc.sel : dc.norm;
-			drawtext(m->sel->name, col, False);
-			drawsquare(m->sel->isfixed, m->sel->isfloating, False, col);
+			col = m == selmon ? dc.colors[1] : dc.colors[0];
+			drawtext(m->sel->name, col, True);
+			drawsquare(m->sel->isfixed, m->sel->isfloating, col);
 		}
 		else
-			drawtext(NULL, dc.norm, False);
+			drawtext(NULL, dc.colors[0], False);
 	}
 	XCopyArea(dpy, dc.drawable, m->barwin, dc.gc, 0, 0, m->ww, bh, 0, 0);
 	XSync(dpy, False);
@@ -752,12 +751,42 @@ drawbars(void) {
 }
 
 void
-drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]) {
+drawcoloredtext(char *text) {
+    Bool first=True;
+    char *buf = text, *ptr = buf, c = 1;
+    unsigned long *col = dc.colors[0];
+    int i, ox = dc.x;
+
+    while( *ptr ) {
+        for( i = 0; *ptr < 0 || *ptr > NUMCOLORS; i++, ptr++);
+            if( !*ptr ) break;
+            c=*ptr;
+            *ptr=0;
+             if( i ) {
+                 dc.w = selmon->ww - dc.x;
+                 drawtext(buf, col, first);
+                 dc.x += textnw(buf, i) + textnw(&c,1);
+                 if( first ) dc.x += ( dc.font.ascent + dc.font.descent ) / 2;
+                 first = False;
+             } else if( first ) {
+                 ox = dc.x += textnw(&c,1);
+             }
+             *ptr = c;
+             col = dc.colors[ c-1 ];
+             buf = ++ptr;
+     }
+     if( !first ) dc.x-=(dc.font.ascent+dc.font.descent)/2;
+     drawtext(buf, col, True);
+     dc.x = ox;
+}
+
+void
+drawsquare(Bool filled, Bool empty, unsigned long col[ColLast]) {
 	int x;
 	XGCValues gcv;
 	XRectangle r = { dc.x, dc.y, dc.w, dc.h };
 
-	gcv.foreground = col[invert ? ColBG : ColFG];
+        gcv.foreground = col[ ColFG ];
 	XChangeGC(dpy, dc.gc, GCForeground, &gcv);
 	x = (dc.font.ascent + dc.font.descent + 2) / 4;
 	r.x = dc.x + 1;
@@ -773,17 +802,17 @@ drawsquare(Bool filled, Bool empty, Bool
 }
 
 void
-drawtext(const char *text, unsigned long col[ColLast], Bool invert) {
+drawtext(const char *text, unsigned long col[ColLast], Bool pad) {
 	char buf[256];
 	int i, x, y, h, len, olen;
 	XRectangle r = { dc.x, dc.y, dc.w, dc.h };
 
-	XSetForeground(dpy, dc.gc, col[invert ? ColFG : ColBG]);
+	XSetForeground(dpy, dc.gc, col[ ColBG ]);
 	XFillRectangles(dpy, dc.drawable, dc.gc, &r, 1);
 	if(!text)
 		return;
 	olen = strlen(text);
-	h = dc.font.ascent + dc.font.descent;
+	h = pad ? (dc.font.ascent + dc.font.descent) : 0;
 	y = dc.y;
 	x = dc.x + (h / 2);
 	/* shorten text if necessary */
@@ -794,7 +823,7 @@ drawtext(const char *text, unsigned long
 	if(len < olen)
 		for(i = len; i && i > len - 3; buf[--i] = '.');
 	pango_layout_set_text(dc.plo, text, len);
-	pango_xft_render_layout(dc.xftdrawable, (col==dc.norm?dc.xftnorm:dc.xftsel)+(invert?ColBG:ColFG), dc.plo, x * PANGO_SCALE, y * PANGO_SCALE);
+        pango_xft_render_layout(dc.xftdrawable, (col==dc.colors[0]?dc.xftcolors[0]:dc.xftcolors[1])+(ColFG), dc.plo, x * PANGO_SCALE, y * PANGO_SCALE);
 }
 
 void
@@ -838,7 +867,7 @@ focus(Client *c) {
 		detachstack(c);
 		attachstack(c);
 		grabbuttons(c, True);
-		XSetWindowBorder(dpy, c->win, dc.sel[ColBorder]);
+		XSetWindowBorder(dpy, c->win, dc.colors[1][ColBorder]);
 		XSetInputFocus(dpy, c->win, RevertToPointerRoot, CurrentTime);
 	}
 	else
@@ -1129,7 +1158,7 @@ manage(Window w, XWindowAttributes *wa)
 	}
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
-	XSetWindowBorder(dpy, w, dc.norm[ColBorder]);
+	XSetWindowBorder(dpy, w, dc.colors[0][ColBorder]);
 	configure(c); /* propagates border_width, if size doesn't change */
 	updatesizehints(c);
 	XSelectInput(dpy, w, EnterWindowMask|FocusChangeMask|PropertyChangeMask|StructureNotifyMask);
@@ -1499,12 +1528,11 @@ setup(void) {
 	cursor[CurMove] = XCreateFontCursor(dpy, XC_fleur);
 
 	/* init appearance */
-        dc.norm[ColBorder] = getcolor(normbordercolor, dc.xftnorm+ColBorder);
-        dc.norm[ColBG] = getcolor(normbgcolor, dc.xftnorm+ColBG);
-        dc.norm[ColFG] = getcolor(normfgcolor, dc.xftnorm+ColFG);
-        dc.sel[ColBorder] = getcolor(selbordercolor, dc.xftsel+ColBorder);
-        dc.sel[ColBG] = getcolor(selbgcolor, dc.xftsel+ColBG);
-        dc.sel[ColFG] = getcolor(selfgcolor, dc.xftsel+ColFG);
+	for(int i=0; i<NUMCOLORS; i++) {
+		dc.colors[i][ColBorder] = getcolor( colors[i][ColBorder], dc.xftcolors[i]+ColBorder );
+		dc.colors[i][ColFG] = getcolor( colors[i][ColFG], dc.xftcolors[i]+ColFG );
+		dc.colors[i][ColBG] = getcolor( colors[i][ColBG], dc.xftcolors[i]+ColBG );
+        }
 
 	dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
 	dc.gc = XCreateGC(dpy, root, 0, NULL);
@@ -1702,7 +1730,7 @@ unfocus(Client *c) {
 	if(!c)
 		return;
 	grabbuttons(c, False);
-	XSetWindowBorder(dpy, c->win, dc.norm[ColBorder]);
+	XSetWindowBorder(dpy, c->win, dc.colors[0][ColBorder]);
 	XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
 }
 
Only in dwm-5.8.1-patched: dwm.c.rej
